// check sum of divisors,count of divisors,divisors in o(n) time complexity
int main() {
ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
 int n; cin>>n;int ct = 0; int sum =0;
 rep(i,1,n+1)){
     if(n%i==0){
         cout<<i<<endl;
         ct++;
         sum+=i;
   }  
     
 }
     cout<<ct<<endl;
     cout<<sum<<endl;
 
   return 0;
}


//    check sum of divisors,count of divisors,divisors in sqrt(n) time complexity
int main() {
ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
 int n; cin>>n;int ct = 0; int sum =0;
 for(int i = 1;i*i<=n;i++){
     if(n%i==0){
         cout<<i<<" " << n/i<<endl;
         ct++;
         sum+=i;
     
     if(n/i!=i){
         ct++;
         sum+=n/i;
     }
 }
 }
     cout<<ct<<endl;
     cout<<sum<<endl;
 
   return 0;
}

// prime check in O(sqrt(n))
int main() {
ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
 int n; cin>>n;
    if(n==1){
         cout<<0<<endl;
         continue;
     }
 bool flag = true;
 for(int i = 2;i<=sqrt(n);i++){
     if(n%i==0){
         flag = false;
         break;
    }
 }
    cout<<flag<<endl;
   return 0;
}



// prime factorisation in sqrt(n)-
int main() {
ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
 int n; cin>>n;
 vector<int>p;
 for(int i = 2;i<=sqrt(n);i++){
     while(n%i==0){
         p.push_back(i);
         n = n/i;
    }
}
    if(n>1){
        p.push_back(n);
    }
   for(auto val:p){
       cout<<val<<" ";
   }
 
   return 0;
}
